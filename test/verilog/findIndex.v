/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire [7:0] xs_0
    , input wire [7:0] xs_1
    , input wire [7:0] xs_2
    , input wire [7:0] xs_3
    , input wire [7:0] xs_4
    , input wire [7:0] xs_5
    , input wire [7:0] xs_6

      // Outputs
    , output wire [3:0] result
    );
  wire [31:0] ws;
  wire [27:0] c$ws_app_arg;
  wire [83:0] c$ws_app_arg_0;
  wire [55:0] xs;
  wire [27:0] c$vec2;

  assign xs = {xs_0,   xs_1,   xs_2,   xs_3,
               xs_4,   xs_5,   xs_6};

  assign ws = {c$ws_app_arg,{1'b0,3'bxxx}};

  assign result = ws[32-1 -: 4];

  // imap begin
  genvar i;
  generate
  for (i=0; i < 7; i = i + 1) begin : imap
    wire [3-1:0] map_index;
    wire [11:0] map_in;
    assign map_in = c$ws_app_arg_0[i*12+:12];
    wire [3:0] map_out;

    assign map_index = 3'd6 - i[0+:3];
    wire [7:0] x;
    wire [3:0] c$case_alt;
    assign map_out = c$case_alt;

    assign x = map_in[11:4];

    assign c$case_alt = (x > 8'd3) ? {1'b1,map_index} : map_in[3:0];


    assign c$ws_app_arg[i*4+:4] = map_out;
  end
  endgenerate
  // imap end

  assign c$vec2 = (ws[28-1 : 0]);

  // zipWith start
  genvar i_0;
  generate
  for (i_0 = 0; i_0 < 7; i_0 = i_0 + 1) begin : zipWith
    wire [7:0] zipWith_in1;
    assign zipWith_in1 = xs[i_0*8+:8];
    wire [3:0] zipWith_in2;
    assign zipWith_in2 = c$vec2[i_0*4+:4];
    wire [11:0] c$n;
    assign c$n = {zipWith_in1,   zipWith_in2};


    assign c$ws_app_arg_0[i_0*12+:12] = c$n;
  end
  endgenerate
  // zipWith end


endmodule

