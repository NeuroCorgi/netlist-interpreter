/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input wire [63:0] ds
    , input wire [63:0] ds1

      // Outputs
    , output wire [63:0] c$case_alt
    );

   function [1:0] topEntity_enc_643343E1899FE196;
	  input [1:0]		a;
	  case (a)
		2'b00:   topEntity_enc_643343E1899FE196 = 2'b10;
		2'b01:   topEntity_enc_643343E1899FE196 = 2'b01;
		2'b10:   topEntity_enc_643343E1899FE196 = 2'b00;
		default: topEntity_enc_643343E1899FE196 = 2'b00;
	  endcase
   endfunction

  wire [63:0] w1;
  wire [63:0] w2;
  wire [63:0] c$app_arg;
  wire [63:0] c$i;

  assign w1 = ds;

  assign w2 = ds1;

  assign c$case_alt = c$app_arg;

  assign c$i = (w1 | w2);

  // clz begin
  wire [0:63] v;
  assign v = c$i[63:0];

  wire [0:63] e;
  genvar i;
  generate
  for (i=0;i<32;i=i+1) begin : enc_stage
    assign e[i*2:i*2+1] = topEntity_enc_643343E1899FE196(v[i*2:i*2+1]);
  end
  endgenerate

  reg [0:47] a;
  genvar i1;
  generate
  for (i1=0;i1<16;i1=i1+1) begin : mux_stage
    localparam n = 2;
    wire [3:0] i;
    assign i = e[i1*4:i1*4+3];
    always @(*) begin
      case (i[n-1+n])
        1'b0    : a[i1*3:i1*3+2] = {i[n-1+n] && i[n-1],1'b0,i[2*n-2:n]};
        default : a[i1*3:i1*3+2] = {i[n-1+n] && i[n-1],~ i[n-1],i[n-2:0]};
      endcase
    end
  end
  endgenerate

  reg [0:31] b;
  genvar i2;
  generate
  for (i2=0;i2<8;i2=i2+1) begin : mux_stage2
    localparam n = 3;
    wire [5:0] i;
    assign i = a[i2*6:i2*6+5];
    always @(*) begin
      case (i[n-1+n])
        1'b0    : b[i2*4:i2*4+3] = {i[n-1+n] && i[n-1],1'b0,i[2*n-2:n]};
        default : b[i2*4:i2*4+3] = {i[n-1+n] && i[n-1],~ i[n-1],i[n-2:0]};
      endcase
    end
  end
  endgenerate

  reg [0:19] c;
  genvar i3;
  generate
  for (i3=0;i3<4;i3=i3+1) begin : mux_stage3
    localparam n = 4;
    wire [7:0] i;
    assign i = b[i3*8:i3*8+7];
    always @(*) begin
      case (i[n-1+n])
        1'b0    : c[i3*5:i3*5+4] = {i[n-1+n] && i[n-1],1'b0,i[2*n-2:n]};
        default : c[i3*5:i3*5+4] = {i[n-1+n] && i[n-1],~ i[n-1],i[n-2:0]};
      endcase
    end
  end
  endgenerate

  reg [0:11] d;
  genvar i4;
  generate
  for (i4=0;i4<2;i4=i4+1) begin : mux_stage4
    localparam n = 5;
    wire [9:0] i;
    assign i = c[i4*10:i4*10+9];
    always @(*) begin
      case (i[n-1+n])
        1'b0    : d[i4*6:i4*6+5] = {i[n-1+n] && i[n-1],1'b0,i[2*n-2:n]};
        default : d[i4*6:i4*6+5] = {i[n-1+n] && i[n-1],~ i[n-1],i[n-2:0]};
      endcase
    end
  end
  endgenerate

  reg [0:6] res;
  generate
  if (1) begin
  localparam n = 6;
  wire [11:0] i;
  assign i = d[0:11];
  always @(*) begin
    case (i[n-1+n])
      1'b0    : res = {i[n-1+n] && i[n-1],1'b0,i[2*n-2:n]};
      default : res = {i[n-1+n] && i[n-1],~ i[n-1],i[n-2:0]};
    endcase
  end
  end
  endgenerate

  assign c$app_arg = $unsigned(res);
  // clz end


endmodule

